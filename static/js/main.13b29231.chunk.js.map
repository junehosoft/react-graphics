{"version":3,"sources":["components/orbit-controls.jsx","utils/procedural-color.ts","components/box.tsx","components/box-grid.tsx","const/palettes.ts","utils/color-util.ts","scenes/box-grid-scene.tsx","App.js","reportWebVitals.js","index.js"],"names":["CustomOrbitControls","useThree","camera","domElement","gl","controls","useRef","useFrame","current","update","ref","args","extend","OrbitControls","generateColor","a","b","c","d","t","inter","clone","multiplyScalar","add","Math","PI","Color","cos","r","g","multiply","DEFAULT_COLOR","THREE","Box","color","meshProps","initialTime","isMoving","palette","mesh","material","useState","hovered","setHover","active","setActive","clock","rotation","x","random","y","getElapsedTime","scale","onClick","onPointerOver","onPointerOut","attach","BoxGrid","count","row","col","React","useMemo","floor","rowMid","colMid","boxgrid","Array","from","length","_el","i","norm","sqrt","position","P_A","P_B","P_C","colorToHexString","getHexString","mapPaletteToStrings","colors","BoxGridScene","data","setData","setIsMoving","handleClickPause","useCallback","presets","A","B","C","strings","style","top","left","width","height","dpr","window","devicePixelRatio","intensity","onUpdate","label","options","path","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13b29231.chunk.js","sourcesContent":["import { useFrame, useThree, extend } from '@react-three/fiber';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport React, { useRef } from 'react';\r\n\r\nextend({ OrbitControls });\r\n\r\nexport default function CustomOrbitControls() {\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n\r\n  const controls = useRef();\r\n  useFrame(() => {\r\n    if (controls.current) {\r\n      controls.current.update();\r\n    }\r\n  });\r\n\r\n  return <orbitControls ref={controls} args={[camera, domElement]} />;\r\n}\r\n","import { Color } from 'three';\r\n\r\n// a + b ⋅ cos[2π(c⋅t+d)]\r\nexport function generateColor(\r\n  a: Color,\r\n  b: Color,\r\n  c: Color,\r\n  d: Color,\r\n  t: number,\r\n): Color {\r\n  const inter = c\r\n    .clone()\r\n    .multiplyScalar(t)\r\n    .add(d)\r\n    .multiplyScalar(Math.PI * 2);\r\n  const cos = new Color(\r\n    Math.cos(inter.r),\r\n    Math.cos(inter.g),\r\n    Math.cos(inter.b),\r\n  );\r\n  return cos.clone().multiply(b).add(a);\r\n}\r\n\r\nexport function generateColorArray(\r\n  a: Color,\r\n  b: Color,\r\n  c: Color,\r\n  d: Color,\r\n  steps: number,\r\n): Color[] {\r\n  return Array.from({ length: steps }, (_el, i) => {\r\n    return generateColor(a, b, c, d, i / (steps - 1));\r\n  });\r\n}\r\n","import { useFrame } from '@react-three/fiber';\r\nimport React, { ReactElement, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { ProceduralPalette } from '../type';\r\nimport { generateColor } from '../utils/procedural-color';\r\n\r\nexport interface Props {\r\n  color?: THREE.Color;\r\n  meshProps: JSX.IntrinsicElements['mesh'];\r\n  initialTime?: number;\r\n  isMoving?: boolean;\r\n  palette?: ProceduralPalette;\r\n}\r\n\r\nconst DEFAULT_COLOR = new THREE.Color('orange');\r\n\r\nexport default function Box({\r\n  color,\r\n  meshProps,\r\n  initialTime = 0,\r\n  isMoving = true,\r\n  palette,\r\n}: Props): ReactElement {\r\n  // References\r\n  const mesh = useRef<THREE.Mesh>();\r\n  const material = useRef<THREE.MeshPhongMaterial>();\r\n\r\n  // Set up state for the hovered and active state\r\n  const [hovered, setHover] = useState(false);\r\n  const [active, setActive] = useState(false);\r\n\r\n  // Render loop\r\n  useFrame(({ clock }): void => {\r\n    if (mesh.current) {\r\n      mesh.current.rotation.x += Math.random() * 0.02 + 0.01;\r\n      mesh.current.rotation.y += 0.02;\r\n    }\r\n    if (material.current) {\r\n      if (palette && isMoving) {\r\n        material.current.color = generateColor(\r\n          palette.a,\r\n          palette.b,\r\n          palette.c,\r\n          palette.d,\r\n          initialTime + clock.getElapsedTime() / 2,\r\n        );\r\n      }\r\n    }\r\n  });\r\n  return (\r\n    <mesh\r\n      {...meshProps}\r\n      ref={mesh}\r\n      scale={hovered ? 1.5 : 1}\r\n      onClick={() => setActive(!active)}\r\n      onPointerOver={() => setHover(true)}\r\n      onPointerOut={() => setHover(false)}\r\n    >\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshPhongMaterial\r\n        attach=\"material\"\r\n        ref={material}\r\n        color={color || DEFAULT_COLOR}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport Box from '../components/box';\r\nimport { ProceduralPalette } from '../type';\r\n\r\nexport interface Props {\r\n  count?: number;\r\n  col?: number;\r\n  isMoving?: boolean;\r\n  palette: ProceduralPalette;\r\n  row?: number;\r\n}\r\n\r\nexport default function BoxGrid({\r\n  count = 25,\r\n  row = 5,\r\n  col = 5,\r\n  palette,\r\n  isMoving = true,\r\n}: Props): ReactElement {\r\n  const [rowMid, colMid] = React.useMemo((): number[] => {\r\n    return [Math.floor(row / 2), Math.floor(col / 2)];\r\n  }, [row, col]);\r\n\r\n  const boxgrid: ReactElement[] = React.useMemo((): ReactElement[] => {\r\n    return Array.from({ length: count }, (_el, i) => {\r\n      const x = Math.floor(i / col) - colMid;\r\n      const y = (i % row) - rowMid;\r\n      const norm = Math.sqrt(x * x + y * y) / row;\r\n      return (\r\n        <Box\r\n          key={i}\r\n          initialTime={norm}\r\n          isMoving={isMoving}\r\n          meshProps={{\r\n            position: [x * 2, y * 2, 0],\r\n          }}\r\n          palette={palette}\r\n        />\r\n      );\r\n    });\r\n  }, [col, colMid, count, isMoving, palette, row, rowMid]);\r\n\r\n  return <group>{boxgrid}</group>;\r\n}\r\n","import { Color } from 'three';\r\nimport { ProceduralPalette } from '../type/procedural-palette';\r\n\r\nconst P_A: ProceduralPalette = {\r\n  a: new Color(0.5, 0.5, 0.5),\r\n  b: new Color(0.5, 0.5, 0.5),\r\n  c: new Color(1.0, 1.0, 1.0),\r\n  d: new Color(0.0, 0.1, 0.2),\r\n};\r\n\r\nconst P_B: ProceduralPalette = {\r\n  a: new Color(0.5, 0.5, 0.5),\r\n  b: new Color(0.5, 0.5, 0.5),\r\n  c: new Color(1.0, 1.0, 1.0),\r\n  d: new Color(0.3, 0.2, 0.2),\r\n};\r\n\r\nconst P_C: ProceduralPalette = {\r\n  a: new Color(0.5, 0.5, 0.5),\r\n  b: new Color(0.5, 0.5, 0.5),\r\n  c: new Color(1.0, 0.7, 0.4),\r\n  d: new Color(0.0, 0.15, 0.2),\r\n};\r\n\r\nexport { P_A, P_B, P_C };\r\n","import { Color } from 'three';\r\nimport { ProceduralPalette } from '../type';\r\n\r\nexport function colorToHexString(col: Color): string {\r\n  return '#' + col.getHexString();\r\n}\r\n\r\nexport function mapPaletteToStrings(\r\n  colors: ProceduralPalette,\r\n): Record<string, string> {\r\n  return {\r\n    a: colorToHexString(colors.a),\r\n    b: colorToHexString(colors.b),\r\n    c: colorToHexString(colors.c),\r\n    d: colorToHexString(colors.d),\r\n  };\r\n}\r\n\r\nexport function mapStringsToPalette(\r\n  strings: Record<string, string>,\r\n): ProceduralPalette {\r\n  return {\r\n    a: new Color(strings.a),\r\n    b: new Color(strings.b),\r\n    c: new Color(strings.c),\r\n    d: new Color(strings.d),\r\n  };\r\n}\r\n","import { Canvas } from '@react-three/fiber';\r\nimport React, { ReactElement } from 'react';\r\nimport DatGui, { DatButton, DatColor, DatPresets } from 'react-dat-gui';\r\nimport 'react-dat-gui/dist/index.css';\r\nimport { OrbitControls } from '../components';\r\nimport BoxGrid from '../components/box-grid';\r\nimport { P_A, P_B, P_C } from '../const/palettes';\r\nimport { ProceduralPalette } from '../type';\r\nimport { mapPaletteToStrings, mapStringsToPalette } from '../utils/color-util';\r\n\r\nexport interface Props {\r\n  data: Record<string, unknown>;\r\n}\r\n\r\nexport default function BoxGridScene(): ReactElement {\r\n  const [data, setData] = React.useState({\r\n    palette: mapPaletteToStrings(P_A),\r\n  });\r\n\r\n  const [isMoving, setIsMoving] = React.useState<boolean>(true);\r\n\r\n  const handleClickPause = React.useCallback((): void => {\r\n    setIsMoving(!isMoving);\r\n  }, [isMoving, setIsMoving]);\r\n\r\n  const presets = [\r\n    {\r\n      A: { ...data, palette: mapPaletteToStrings(P_A) },\r\n    },\r\n    {\r\n      B: { ...data, palette: mapPaletteToStrings(P_B) },\r\n    },\r\n    {\r\n      C: { ...data, palette: mapPaletteToStrings(P_C) },\r\n    },\r\n  ];\r\n\r\n  const palette: ProceduralPalette = React.useMemo((): ProceduralPalette => {\r\n    return mapStringsToPalette(data.palette);\r\n  }, [data.palette]);\r\n\r\n  return (\r\n    <div>\r\n      <Canvas\r\n        style={{\r\n          position: 'fixed',\r\n          top: 0,\r\n          left: 0,\r\n          width: '100%',\r\n          height: '100%',\r\n        }}\r\n        dpr={window.devicePixelRatio / 1.5}\r\n      >\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight intensity={1.5} position={[10, 10, -5]} />\r\n        <BoxGrid\r\n          count={100}\r\n          row={10}\r\n          col={10}\r\n          palette={palette}\r\n          isMoving={isMoving}\r\n        />\r\n        <OrbitControls />\r\n      </Canvas>\r\n      <DatGui data={data} onUpdate={setData}>\r\n        <DatButton label=\"Pause/Play\" onClick={handleClickPause} />\r\n        <DatPresets\r\n          label=\"Palette Presets\"\r\n          options={presets}\r\n          onUpdate={setData}\r\n        />\r\n        <DatColor path=\"palette.a\" label=\"a\" />\r\n        <DatColor path=\"palette.b\" label=\"b\" />\r\n        <DatColor path=\"palette.c\" label=\"c (leave for best)\" />\r\n        <DatColor path=\"palette.d\" label=\"d\" />\r\n      </DatGui>\r\n    </div>\r\n  );\r\n}\r\n","//import './App.css';\r\nimport React from 'react';\r\nimport BoxGridScene from './scenes/box-grid-scene';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <BoxGridScene />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}