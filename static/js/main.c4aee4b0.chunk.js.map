{"version":3,"sources":["utils/procedural-color.ts","components/box.tsx","const/palettes.ts","components/box-grid.tsx","components/orbit-controls.jsx","scenes/box-grid-scene.tsx","App.js","reportWebVitals.js","index.js"],"names":["generateColor","a","b","c","d","t","inter","clone","multiplyScalar","add","Math","PI","Color","cos","r","g","multiply","DEFAULT_COLOR","THREE","Box","color","meshProps","initialTime","palette","mesh","useRef","material","useState","hovered","setHover","active","setActive","useFrame","clock","current","rotation","x","random","y","getElapsedTime","ref","scale","onClick","onPointerOver","onPointerOut","args","P_A","BoxGrid","count","row","col","React","useMemo","floor","rowMid","colMid","boxgrid","Array","from","length","_el","i","norm","sqrt","position","P","CustomOrbitControls","useThree","camera","domElement","gl","controls","update","BoxGridScene","intensity","extend","OrbitControls","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4aee4b0.chunk.js","sourcesContent":["import { Color } from 'three';\r\n\r\n// a + b ⋅ cos[2π(c⋅t+d)]\r\nexport function generateColor(\r\n  a: Color,\r\n  b: Color,\r\n  c: Color,\r\n  d: Color,\r\n  t: number,\r\n): Color {\r\n  const inter = c\r\n    .clone()\r\n    .multiplyScalar(t)\r\n    .add(d)\r\n    .multiplyScalar(Math.PI * 2);\r\n  const cos = new Color(\r\n    Math.cos(inter.r),\r\n    Math.cos(inter.g),\r\n    Math.cos(inter.b),\r\n  );\r\n  return cos.clone().multiply(b).add(a);\r\n}\r\n\r\nexport function generateColorArray(\r\n  a: Color,\r\n  b: Color,\r\n  c: Color,\r\n  d: Color,\r\n  steps: number,\r\n): Color[] {\r\n  return Array.from({ length: steps }, (_el, i) => {\r\n    return generateColor(a, b, c, d, i / (steps - 1));\r\n  });\r\n}\r\n","import { useFrame } from '@react-three/fiber';\r\nimport React, { ReactElement, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { ProceduralPalette } from '../type';\r\nimport { generateColor } from '../utils/procedural-color';\r\n\r\nexport interface Props {\r\n  color?: THREE.Color;\r\n  meshProps: JSX.IntrinsicElements['mesh'];\r\n  initialTime?: number;\r\n  palette?: ProceduralPalette;\r\n}\r\n\r\nconst DEFAULT_COLOR = new THREE.Color('orange');\r\n\r\nexport default function Box({\r\n  color,\r\n  meshProps,\r\n  initialTime = 0,\r\n  palette,\r\n}: Props): ReactElement {\r\n  // References\r\n  const mesh = useRef<THREE.Mesh>();\r\n  const material = useRef<THREE.MeshPhongMaterial>();\r\n\r\n  // Set up state for the hovered and active state\r\n  const [hovered, setHover] = useState(false);\r\n  const [active, setActive] = useState(false);\r\n\r\n  // Render loop\r\n  useFrame(({ clock }): void => {\r\n    if (mesh.current) {\r\n      mesh.current.rotation.x += Math.random() * 0.02 + 0.01;\r\n      mesh.current.rotation.y += 0.02;\r\n    }\r\n    if (material.current) {\r\n      if (palette) {\r\n        material.current.color = generateColor(\r\n          palette.a,\r\n          palette.b,\r\n          palette.c,\r\n          palette.d,\r\n          initialTime + clock.getElapsedTime() / 2,\r\n        );\r\n      } else {\r\n        material.current.color = color || DEFAULT_COLOR;\r\n      }\r\n    }\r\n  });\r\n  return (\r\n    <mesh\r\n      {...meshProps}\r\n      ref={mesh}\r\n      scale={hovered ? 1.5 : 1}\r\n      onClick={() => setActive(!active)}\r\n      onPointerOver={() => setHover(true)}\r\n      onPointerOut={() => setHover(false)}\r\n    >\r\n      <boxGeometry args={[1, 1, 1]} />\r\n      <meshPhongMaterial ref={material} />\r\n    </mesh>\r\n  );\r\n}\r\n","import { Color } from 'three';\r\nimport { ProceduralPalette } from '../type/procedural-palette';\r\n\r\nconst P_A: ProceduralPalette = {\r\n  a: new Color(0.5, 0.5, 0.5),\r\n  b: new Color(0.5, 0.5, 0.5),\r\n  c: new Color(1.0, 1.0, 1.0),\r\n  d: new Color(0.0, 0.1, 0.2),\r\n};\r\n\r\nconst P_B: ProceduralPalette = {\r\n  a: new Color(0.5, 0.5, 0.5),\r\n  b: new Color(0.5, 0.5, 0.5),\r\n  c: new Color(1.0, 1.0, 1.0),\r\n  d: new Color(0.3, 0.2, 0.2),\r\n};\r\n\r\nexport { P_A, P_B };\r\n","import React, { ReactElement } from 'react';\r\nimport Box from '../components/box';\r\nimport { P_A as P } from '../const/palettes';\r\n\r\nexport interface Props {\r\n  count?: number;\r\n  row?: number;\r\n  col?: number;\r\n}\r\n\r\nexport default function BoxGrid({\r\n  count = 25,\r\n  row = 5,\r\n  col = 5,\r\n}: Props): ReactElement {\r\n  //const colors: Color[] = generateColors(P.a, P.b, P.c, P.d, col);\r\n\r\n  const [rowMid, colMid] = React.useMemo((): number[] => {\r\n    return [Math.floor(row / 2), Math.floor(col / 2)];\r\n  }, [row, col]);\r\n\r\n  const boxgrid: ReactElement[] = React.useMemo((): ReactElement[] => {\r\n    return Array.from({ length: count }, (_el, i) => {\r\n      const x = Math.floor(i / col) - colMid;\r\n      const y = (i % row) - rowMid;\r\n      const norm = Math.sqrt(x * x + y * y) / row;\r\n      return (\r\n        <Box\r\n          initialTime={norm}\r\n          meshProps={{\r\n            position: [x * 2, y * 2, 0],\r\n          }}\r\n          palette={P}\r\n        />\r\n      );\r\n    });\r\n  }, [col, colMid, count, row, rowMid]);\r\n\r\n  return <group>{boxgrid}</group>;\r\n}\r\n","import { useFrame, useThree, extend } from '@react-three/fiber';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport React, { useRef } from 'react';\r\n\r\nextend({ OrbitControls });\r\n\r\nexport default function CustomOrbitControls() {\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n\r\n  const controls = useRef();\r\n  useFrame(() => {\r\n    if (controls.current) {\r\n      controls.current.update();\r\n    }\r\n  });\r\n\r\n  return <orbitControls ref={controls} args={[camera, domElement]} />;\r\n}\r\n","import { Canvas } from '@react-three/fiber';\r\nimport React, { ReactElement } from 'react';\r\nimport BoxGrid from '../components/box-grid';\r\n//import Box from '../components/box';\r\nimport { OrbitControls } from '../components';\r\n\r\nexport default function BoxGridScene(): ReactElement {\r\n  return (\r\n    <Canvas>\r\n      <ambientLight intensity={0.5} />\r\n      <pointLight position={[10, 10, -5]} />\r\n      <BoxGrid count={100} row={10} col={10} />\r\n      <OrbitControls />\r\n    </Canvas>\r\n  );\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport BoxGridScene from './scenes/box-grid-scene';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          June Ho basic REACT site\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a> */}\r\n        <BoxGridScene />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}